#include <Servo.h>
#include <Wire.h> //I2C Arduino Library
#define address 0x1E //0011110b, I2C 7bit address of HMC5883

const int AOUTpin=0;//the AOUT pin of the methane sensor goes into analog pin A0 of the arduino
const int DOUTpin=5;//the DOUT pin of the methane sensor goes into digital pin D8 of the arduino
const int ledPin=13;//the anode of the LED connects to digital pin D13 of the arduino
float Ro = 10000.0;
float Vrl = 0.0;
float Rs = 0.0;
float ratio = 0.0;
float ppm = 0.0;
int limit;
int MethaneValue;
int moistureSensor = 1;
int moistureValue = 0;

float newData[200]; //We will know the size of the float array

int start = 0; //start keeps track of next float in string to be parsed
int data_index = 0; //data_index keeps track of which index to place float in float array

float verticalSpeed = 0; //forward/backward, joystick element 1
float horizontalSpeed = 0; //right/left; joystick element 0
float rotationSpeed = 0; //rotate right/left about centre axis; joystick element 3

float armspeed = 1;
float clawspeed = 2;
float sidespeed = 1;

float dampingFactor = 0;
Servo myservo1;  //Left wheel
Servo myservo2;  //Right wheelv
Servo myservo3; //claw
Servo myservo4; //arm
Servo myservo5; //slider
Servo myservo6; //claw
Servo myservo7; //slider
Servo myservo8; //slider

void setup(){
  //PWM control wheels
  myservo1.attach(6);
  myservo2.attach(7);
  myservo3.attach(8);
  myservo4.attach(9);
  myservo5.attach(10);
  myservo6.attach(11);
  myservo7.attach(12);
  myservo8.attach(13);
  Serial.begin(9600);
  Serial2.begin(9600);
  //delay(100);
  
  pinMode(DOUTpin, INPUT);//sets the pin as an input to the arduino
  pinMode(ledPin, OUTPUT);//sets the pin as an output of the arduino
  
  Wire.begin();
  //Put the HMC5883 IC into the correct operating mode
  Wire.beginTransmission(address); //open communication with HMC5883
  Wire.write(0x02); //select mode register
  Wire.write(0x00); //continuous measurement mode
  Wire.endTransmission();
}

void loop(){
  
  int x,y,z; //triple axis data
  float angle;
  //Tell the HMC5883 where to begin reading data
  Wire.beginTransmission(address); 
  Wire.write(0x03); //select register 3, X MSB register
  Wire.endTransmission();
 
 //Read data from each axis, 2 registers per axis
  Wire.requestFrom(address, 6);
  if(6<=Wire.available()){
    //Serial.println("6 < wire");
    x = Wire.read()<<8; //X msb
    x |= Wire.read(); //X lsb
    z = Wire.read()<<8; //Z msb
    z |= Wire.read(); //Z lsb
    y = Wire.read()<<8; //Y msb
    y |= Wire.read(); //Y lsb
  }
  
  angle = atan2(y,x);
  if(angle < 0){
    angle += 2*PI;
  }
  angle *= 180/PI;
  angle += 360 - 13.24 - 257.45;
  if(angle > 360){
    angle -= 360;
  }
  
  
  //(360 - 13.24) deg wrt west corresponds to 257.45 deg on sensor
  
  MethaneValue= analogRead(AOUTpin);//reads the analaog MethaneValue from the methane sensor's AOUT pin
  limit= digitalRead(DOUTpin);//reads the digital MethaneValue from the methane sensor's DOUT pin
  Vrl = MethaneValue * ( 5.00 / 1024.0  );      // V
  Rs = 20000 * ( 5.00 - Vrl) / Vrl ;   // Ohm
  ratio =  Rs/Ro;
  ppm = get_CO(ratio);  
  moistureValue = analogRead(moistureSensor);
  
  //Process string and build float array
  if(Serial2.available() > 0){
    data_index = 0;
    start = 0;
    String string = Serial2.readStringUntil('\n');
    //String string = "0.5,1.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0"; //Test String
    
    //Serial.println(string);

    for(int i = 0; i < string.length(); i++){
      if(string.substring(i, i+1) == "," || i == string.length()-1){
        if (string.substring(i, i+1) == ","){ //Check for comma to denote end of float in string
          newData[data_index] = string.substring(start, i).toFloat();
        }
        else{ //Account for last float in string
          newData[data_index] = string.substring(start, string.length()).toFloat();
        }
        start = i+1;
        data_index++;
      }
    }
    
  horizontalSpeed = newData[0];
  verticalSpeed = newData[1];
  rotationSpeed = newData[2];
  dampingFactor = (newData[3]+1)/2; //Takes a number from -1 to 1 and converts it to 0 to 1 to control speed range 
  
//  Serial.print("Vertical Speed: ");
//  Serial.println(verticalSpeed);
//  Serial.print("Horizontal Speed: ");
//  Serial.println(horizontalSpeed);
//  Serial.print("Rotation Speed: ");
//  Serial.println(rotationSpeed);
  }
  moveRover(verticalSpeed, horizontalSpeed, rotationSpeed);
  moveArm();
  moveClaw();
  
  Serial2.println("***********************Princess Ginger is stupid***************************");
  //Serial2.print("x: ");
  Serial2.print(x);
  Serial2.print(",");
  Serial2.print(y);
  Serial2.print(",");
  Serial2.print(z);
  
  Serial2.print(",");
  Serial2.print(ppm);//prints the methane MethaneValue
  Serial2.print(",");
  Serial2.print(ppm);//prints the methane MethaneValue
  Serial2.print(",");
  Serial2.print(ppm);//prints the methane MethaneValue
  
  Serial2.print(",");
  Serial2.print(moistureValue); 
  Serial2.print(",");
  Serial2.println(moistureValue); 

  
  Serial.print("x: ");
  Serial.print(x);
  Serial.print("  y: ");
  Serial.print(y);
  Serial.print("  z: ");
  Serial.print(z);
  Serial.print("  angle: ");
  Serial.println(angle);
  
  //delay(250);
//  Serial.print("Methane MethaneValue: ");
//  Serial.println(MethaneValue);//prints the methane MethaneValue
//  Serial.print("Limit: ");
//  Serial.println(limit);//prints the limit reached as either LOW or HIGH (above or underneath)
//  Serial.print("ppm: ");
//  Serial.println(ppm);//prints the limit reached as either LOW or HIGH (above or underneath)
//
//  Serial.print("Soil Moisture: ");
//  Serial.println(moistureValue); 

  //Serial.write(AOUTpin);
  //delay(250);
}

//Takes number in range [-1:1] and converts to dampingFactor*[31:159]
int custom_map(float num){
  int adjustedSpeed;
  
  if (num >= 0){
    adjustedSpeed = 69*num*dampingFactor+90; 
  }
  else if (num <= 0){
    adjustedSpeed = 59*num*dampingFactor+90;
  }
  return adjustedSpeed;
}

void actuate_motor(Servo servo, float joystickSpeed){
//  int motorspeed = custom_map(joystickSpeed);
//  if (joystickSpeed >= 0){
//    for (int i = 90; i <=motorSpeed; i++){
//      servo.write(i);
//      delay(1);
//    }
//  }
//  else if (joystickSpeed <= 0){
//    for (int i = 90; i >=motorSpeed; i--){
//      servo.write(i);
//      delay(1);
//    }
  servo.write(custom_map(joystickSpeed));
//  }

  //servo.write(motorspeed);
}

void moveRover(float verticalSpeed, float horizontalSpeed, float rotationSpeed){
  float turningSpeed = diagonalSpeed(verticalSpeed, horizontalSpeed);
  
  if(horizontalSpeed != 0 || verticalSpeed != 0){  //Continuous forward/backward/turning movement
    if (horizontalSpeed > 0){  //first and fourth quadrant
      actuate_motor(myservo2, turningSpeed); //left wheel moves faster
      actuate_motor(myservo1, turningSpeed*(1-abs(horizontalSpeed))); //right wheel moves slower wrt left wheel
    }
    else{  //second and third quadrant
      actuate_motor(myservo2, turningSpeed*(1-abs(horizontalSpeed))); //Left wheel moves slower wrt right wheel
      actuate_motor(myservo1, turningSpeed); //Right wheel moves faster
    }
  }
  else{  //Rotate rover about centre axis; only rotate on the spot if the joystick doesn't go forward or backward
    actuate_motor(myservo1, rotationSpeed);
    actuate_motor(myservo2, -rotationSpeed);
  }
}

void moveArm(){
  if (newData[10]){//move claw down
    actuate_motor(myservo3, -1);
  }
  else if (newData[11]){//move claw up
    actuate_motor(myservo3, 1);
  }
  if (newData[12]){//move arm down
    actuate_motor(myservo4, -1);
  }
  else if (newData[13]){//move arm up
    actuate_motor(myservo4, 1);
  }   
  if (newData[14]){//move slider right
    actuate_motor(myservo5, -1);
  }
  else if (newData[15]){//move slider left
    actuate_motor(myservo5, 1);
  }  
}

void moveClaw(){
//  for (int i = 0; i <=10;i++){
//    Serial.print(newData[i]);
//    Serial.print(" ");
//  }
//  
//  Serial.println();
  int clawSpeed = 2;
  if (newData[4]){//close claw
    actuate_servo(myservo6, clawSpeed);
    //Serial.println("princess ginger");
  }
  else if (newData[5]){//open claw
    actuate_servo(myservo6, -clawSpeed);
  }
  if (newData[6]){//close claw
    actuate_servo(myservo7, -clawSpeed);
  }
  else if (newData[8]){//open claw
    actuate_servo(myservo7, clawSpeed);
  }
  if (newData[7]){//close claw
    actuate_servo(myservo8, -clawSpeed);
  }
  else if (newData[9]){//open claw
    actuate_servo(myservo8, clawSpeed);
  }
}

void actuate_servo(Servo servo, int servoSpeed){
  int servoAngle = servo.read();
  //Serial.print(servoAngle); 
  //Serial.println(servoAngle);
  if (servoAngle<=180 && servoAngle >=0){
    servoAngle = servoAngle + servoSpeed;
    servo.write(servoAngle);
    //Serial.println(servoAngle);
    //Serial.println(servoSpeed); 
  }
}

float diagonalSpeed(float vy, float vx){
  float vz = sqrt(vx*vx+vy*vy);
  
  return vz*vy/abs(vy)/sqrt(2);  //Normalize speed for range [-1:1] and direction of vy
}

float get_CO (float ratio){
  float ppm = 0.0;
  ppm = 37143 * pow (ratio, -3.178);
  return ppm;
}
