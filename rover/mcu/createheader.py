"""
Auto-generate Arduino and Python header files for the arduino protocol.


Usage:
  $ python createheader example.txt
  example.txt is a file name 

Output:
  Creates example.h and example_header.py

File format:
  input A3  #A list of inputs is optional. 
  output 1 2 6 A6 #These can go in any order. 
  servo 3 4 #Note: the Arduino is limited to 8 servos. 

  #pound signs begin comments. 
  #Define the ports: 
  RED_LED 5
  YELLOW_LED 7
"""

import datetime, sys

def parse_file(file_name):
    """
    Put the file into a dictionary with keys 'input', 'output', 'servo' and 'port'. 
    """
    parsed_file = {'input':[], 'port':{}, 'servo':[], 'output':[]}
    
    f = open(file_name)
    for line in f:
        line = line.split('#')[0]  #Remove comments. 
        
        if 'input' in line:
            parsed_file['input'] = line.split()[1:]
        elif 'output' in line:
            parsed_file['output'] = line.split()[1:]
        elif 'servo' in line:
            parsed_file['servo'] = line.split()[1:]
        elif len(line.split()) > 1: # the line is not empty
            parsed_file['port'] [line.split()[1]] = line.split()[0]
    return parsed_file


def create_c_header(file_name, parsed_file):
    """
    Create a .c file for the arduino

    Parameters:
    parsed_file - a dictionary with keys 'input', 'output' and 'servo'

    Creates the file. 
    """
    
    file_name = file_name.rsplit('.',1)[0] + "_header.c"
    file = open(file_name, 'w')
    file.write("""// Auto-generated Arduino file in {}
// Generated by createheader.py at {}

#include <Servo.h>\n\n""".format(file_name, datetime.datetime.now().isoformat()))

    # initialize definitions
    servo_ctr = 0
    for i in parsed_file['port']:
        if i in parsed_file['servo']:
            file.write('#define {} {}\n'.format('SERVO_' + parsed_file['port'][i], 'servo[{}]'.format(servo_ctr)))
            servo_ctr += 1
        else:
            file.write('#define {} {}\n'.format(parsed_file['port'][i], i))
    file.write('\n')
        
    # initialize servos
    if len(parsed_file['servo']) > 0:
        file.write('int servoPorts[] = {' + str(parsed_file['servo']).replace('\'', '')[1:-1] + '};\n')
        file.write('Servo servos[{}];\n\n'.format(len(parsed_file['servo'])))

    # initialize pins
    file.write("void setup()\n{\n")
    file.write('  Serial.begin(9600); \n')
    for i in parsed_file['output']:
        file.write('  pinMode({}, OUTPUT);\n'.format(i))
    file.write("")
    for i in parsed_file['input']:
        file.write('  pinMode({}, INPUT);\n'.format(i))
    file.write("")
    servo_ctr = 0
    for i in parsed_file['port']:
        if i in parsed_file['servo']:
            file.write('  servos[{}].attach({});\n'.format(servo_ctr, i))
            servo_ctr += 1
    file.write('}\n\n')

    # create a isServo(int port) function
    if len(parsed_file['servo']) > 0:
        file.write('''
bool isServo(int port)
{
    for(int i = 0; i < servos.length; i++)
    {
        if (servoPorts[i] == port)
            return true;
    }
    return false;
}\n''')

    # create a int getServoIndex(int port) function that maps servo pins to the index in the servos array
    if len(parsed_file['servo']) > 0:
        file.write('''
int getServoIndex(int pin)
{
    switch(pin)
    ''')
        
    servo_ctr = 0
    for i in parsed_file['port']:
        if i in parsed_file['servo']:
            file.write('    case {}: return {};\n'.format(i, servo_ctr))
            servo_ctr += 1
    file.write('    default -1;\n}\n')
    file.close()

def create_py_header(file_name, parsed_file):
    file_name = file_name.rsplit('.',1)[0] + "_header.py"
    file = open(file_name, 'w')

    file.write("""''' Auto-generated Python header for {}
Generated by createheader.py at {} '''\n\n""".format(file_name, datetime.datetime.now().isoformat()))

    for i in parsed_file['port']:
        file.write('{}_PIN = {} \n'.format(parsed_file['port'][i], i))  # do not use this value
    file.close()

if __name__== '__main__':
    import sys
    
    try:
        file_name = sys.argv[1]
    except IndexError:
        file_name = input("What is the file name? >>> ")

    parsed_file = parse_file(file_name)
    print(parsed_file)
    create_c_header(file_name, parsed_file)
    create_py_header(file_name, parsed_file)
